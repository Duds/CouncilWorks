generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  CREW
  EXEC
  CONTRACTOR
  PARTNER
  CITIZEN
  MAINTENANCE_PLANNER
}

// Enhanced Organisation with resilience configuration
model Organisation {
  id        String     @id @default(cuid())
  name      String     @unique
  users     User[]
  assets    Asset[]
  auditLogs AuditLog[]
  rcmTemplates RCMTemplate[]
  invitations Invitation[]
  
  // Enhanced resilience configuration for Aegrid Rules
  resilienceConfig Json?
  marginSettings   Json?
  
  // New entities from ERD
  vendors           Vendor[]
  contracts         Contract[]
  slas              SLA[]
  criticalControls  CriticalControl[]
  assetCriticalControls AssetCriticalControl[]
  citizenReports    CitizenReport[]
  citizenFeedback   CitizenFeedback[]
  riskSignals       RiskSignal[]
  environmentalSignals EnvironmentalSignal[]
  marginCapacities  MarginCapacity[]
  emergencyResponses EmergencyResponse[]
  complianceRecords ComplianceRecord[]
  escalationEvents  EscalationEvent[]
  workOrderEvidence WorkOrderEvidence[]
  inspectionPhotos  InspectionPhoto[]
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Enhanced User model with vendor relationships
model User {
  id              String       @id @default(cuid())
  email           String       @unique
  name            String?
  passwordHash    String?
  role            Role         @default(CITIZEN)
  organisationId  String?
  organisation    Organisation? @relation(fields: [organisationId], references: [id])
  
  // Vendor relationship for contractors and partners
  vendorId        String?
  vendor          Vendor?      @relation(fields: [vendorId], references: [id])
  
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  isActive        Boolean      @default(true)
  lastLoginAt     DateTime?
  passwordResetAt DateTime?
  auditLogs       AuditLog[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // MFA fields
  mfaEnabled      Boolean      @default(false)
  mfaSecret       String?
  mfaBackupCodes  String[]     @default([])
  mfaVerifiedAt   DateTime?
  
  // Profile fields
  phoneNumber     String?
  bio             String?
  timezone        String       @default("Australia/Sydney")
  language        String       @default("en-AU")
  
  // Notification preferences
  notificationPreferences Json @default("{}")
  
  // Enhanced relationships for ERD entities
  workOrdersAssigned WorkOrder[]
  workOrdersCreated WorkOrder[] @relation("WorkOrderAssignedBy")
  inspections       Inspection[]
  assetDocuments    AssetDocument[]
  assetInspections  AssetInspection[]
  assetMaintenance  AssetMaintenance[]
  rcmTemplatesCreated RCMTemplate[] @relation("RCMTemplateCreatedBy")
  invitationsSent   Invitation[] @relation("InvitedBy")
  
  // New ERD relationships
  workOrderEvidence WorkOrderEvidence[]
  inspectionPhotos  InspectionPhoto[]
  citizenReports    CitizenReport[]
  citizenFeedback   CitizenFeedback[]
  riskSignals       RiskSignal[]
  emergencyResponses EmergencyResponse[]
  complianceRecords ComplianceRecord[]
  escalationEvents  EscalationEvent[]
}

// New Vendor model from ERD
model Vendor {
  id                String   @id @default(cuid())
  organisationId    String
  organisation      Organisation @relation(fields: [organisationId], references: [id])
  name              String
  abn               String?
  contactEmail      String
  contactPhone      String?
  performanceRating Decimal? @db.Decimal(3,2)
  capacityMargin    Int?     @default(20)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  users             User[]
  contracts         Contract[]
  workOrders        WorkOrder[]
  assetCriticalControls AssetCriticalControl[]
  
  @@index([organisationId])
  @@index([performanceRating])
}

// New Contract model from ERD
model Contract {
  id              String   @id @default(cuid())
  organisationId  String
  organisation    Organisation @relation(fields: [organisationId], references: [id])
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  name            String
  startDate       DateTime
  endDate         DateTime
  scope           String
  status          String   @default("ACTIVE")
  renewalDueDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  slas            SLA[]
  workOrders      WorkOrder[]
  
  @@index([organisationId])
  @@index([vendorId])
  @@index([status])
}

// New SLA model from ERD
model SLA {
  id                  String   @id @default(cuid())
  organisationId      String
  organisation        Organisation @relation(fields: [organisationId], references: [id])
  contractId          String
  contract            Contract @relation(fields: [contractId], references: [id])
  name                String
  responseTimeHours   Int
  resolutionTimeHours Int
  frequencyDays       Int?
  costModel           String
  breachEscalation    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relationships
  workOrders          WorkOrder[]
  
  @@index([organisationId])
  @@index([contractId])
}

// Enhanced Asset model with purpose and criticality
model Asset {
  id              String       @id @default(cuid())
  organisationId  String
  organisation    Organisation @relation(fields: [organisationId], references: [id])
  
  // Basic Asset Information
  assetNumber     String       @unique
  name            String
  description     String?
  assetType       AssetType
  status          AssetStatus  @default(ACTIVE)
  condition       AssetCondition @default(UNKNOWN)
  priority        AssetPriority @default(MEDIUM)
  
  // Enhanced fields for Aegrid Rules
  purpose         String?      // Rule 1: Every asset has purpose
  purposeDescription String?   // Detailed purpose description
  criticalityLevel String?     // Risk-based criticality
  serviceImpact   String?      // Impact of failure
  functionBasedCategory String? // Function-based categorization
  
  // Location Information (PostGIS spatial data)
  location        Unsupported("geometry(Point,4326)")? // PostGIS Point geometry
  address         String?
  suburb          String?
  postcode        String?
  state           String       @default("NSW")
  country         String       @default("Australia")
  
  // Asset Details
  manufacturer    String?
  model          String?
  serialNumber   String?
  installationDate DateTime?
  warrantyExpiry DateTime?
  expectedLifespan Int? // in years
  
  // Financial Information
  purchasePrice  Decimal?     @db.Decimal(12,2)
  currentValue   Decimal?     @db.Decimal(12,2)
  replacementCost Decimal?    @db.Decimal(12,2)
  depreciationRate Decimal?   @db.Decimal(5,2) // percentage
  
  // Maintenance Information
  lastInspection DateTime?
  nextInspection DateTime?
  inspectionFrequency Int? // in days
  maintenanceCost Decimal? @db.Decimal(12,2)
  
  // Metadata
  tags           String[]     @default([])
  notes          String?
  isPublic       Boolean      @default(false)
  
  // Enhanced relationships for ERD entities
  documents      AssetDocument[]
  inspections    AssetInspection[]
  maintenance    AssetMaintenance[]
  workOrders     WorkOrder[]
  auditLogs      AuditLog[]
  rcmTemplates   AssetRCMTemplate[]
  maintenanceSchedules MaintenanceSchedule[]
  
  // New ERD relationships
  assetCriticalControls AssetCriticalControl[]
  citizenReports        CitizenReport[]
  riskSignals           RiskSignal[]
  emergencyResponses    EmergencyResponse[]
  complianceRecords     ComplianceRecord[]
  
  // Audit fields
  createdBy      String?
  createdByUser  User?        @relation("AssetCreatedBy", fields: [createdBy], references: [id])
  updatedBy      String?
  updatedByUser  User?        @relation("AssetUpdatedBy", fields: [updatedBy], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organisationId])
  @@index([assetNumber])
  @@index([assetType])
  @@index([status])
  @@index([condition])
  @@index([priority])
  @@index([location])
  @@index([createdAt])
}

// Enhanced WorkOrder model with SLA tracking
model WorkOrder {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Enhanced Work Order Details with ERD fields
  workOrderNumber String @unique
  title         String
  description   String
  priority      AssetPriority @default(MEDIUM)
  status        String @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  
  // Enhanced assignment with vendor support
  assignedTo   String?
  assignedToUser User? @relation(fields: [assignedTo], references: [id])
  assignedBy   String?
  assignedByUser User? @relation("WorkOrderAssignedBy", fields: [assignedBy], references: [id])
  
  // Vendor and contract relationships
  vendorId     String?
  vendor       Vendor? @relation(fields: [vendorId], references: [id])
  contractId   String?
  contract     Contract? @relation(fields: [contractId], references: [id])
  slaId        String?
  sla          SLA? @relation(fields: [slaId], references: [id])
  
  // Enhanced scheduling with SLA tracking
  scheduledDate DateTime?
  dueDate      DateTime?
  completedDate DateTime?
  acceptedAt   DateTime?
  acknowledgedAt DateTime?
  startedAt    DateTime?
  
  // SLA compliance tracking
  slaResponseTime   Int?
  slaResolutionTime Int?
  slaStatus         String?
  declineReason     String?
  
  // Cost and Time
  estimatedCost Decimal? @db.Decimal(12,2)
  actualCost    Decimal? @db.Decimal(12,2)
  estimatedDuration Int? // in minutes
  actualDuration   Int? // in minutes
  
  // Enhanced results with evidence
  workPerformed String?
  notes        String?
  evidenceCount Int @default(0)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enhanced relationships for ERD entities
  evidence          WorkOrderEvidence[]
  inspections       Inspection[]
  citizenReports    CitizenReport[]
  emergencyResponse EmergencyResponse[]
  escalationEvents  EscalationEvent[]

  @@index([assetId])
  @@index([workOrderNumber])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([dueDate])
  @@index([slaStatus])
}

// New CriticalControl model from ERD
model CriticalControl {
  id                String   @id @default(cuid())
  organisationId    String
  organisation      Organisation @relation(fields: [organisationId], references: [id])
  name              String
  description       String?
  type              String
  windowHours       Int
  frequencyDays     Int
  escalationPolicy  String?
  status            String   @default("ACTIVE")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  assetMappings     AssetCriticalControl[]
  complianceRecords ComplianceRecord[]
  escalationEvents  EscalationEvent[]
  
  @@index([organisationId])
  @@index([type])
  @@index([status])
}

// New AssetCriticalControl model from ERD
model AssetCriticalControl {
  id                String   @id @default(cuid())
  organisationId    String
  organisation      Organisation @relation(fields: [organisationId], references: [id])
  assetId           String
  asset             Asset    @relation(fields: [assetId], references: [id])
  criticalControlId String
  criticalControl   CriticalControl @relation(fields: [criticalControlId], references: [id])
  vendorId          String?
  vendor            Vendor?  @relation(fields: [vendorId], references: [id])
  lastExecutedAt    DateTime?
  nextDueAt         DateTime?
  status            String   @default("ACTIVE")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([assetId, criticalControlId])
  @@index([organisationId])
  @@index([assetId])
  @@index([criticalControlId])
}

// New CitizenReport model from ERD
model CitizenReport {
  id              String   @id @default(cuid())
  organisationId  String
  organisation    Organisation @relation(fields: [organisationId], references: [id])
  assetId         String?
  asset           Asset?   @relation(fields: [assetId], references: [id])
  workOrderId     String?
  workOrder       WorkOrder? @relation(fields: [workOrderId], references: [id])
  reporterName    String
  reporterEmail   String
  reporterPhone   String?
  issueCategory   String
  riskLevel       String
  description     String
  location        Unsupported("geometry(Point,4326)")?
  status          String   @default("OPEN")
  reportedAt      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  feedback        CitizenFeedback[]
  
  @@index([organisationId])
  @@index([assetId])
  @@index([issueCategory])
  @@index([riskLevel])
  @@index([status])
}

// New CitizenFeedback model from ERD
model CitizenFeedback {
  id                 String   @id @default(cuid())
  organisationId     String
  organisation       Organisation @relation(fields: [organisationId], references: [id])
  citizenReportId    String?
  citizenReport      CitizenReport? @relation(fields: [citizenReportId], references: [id])
  workOrderId        String?
  workOrder          WorkOrder? @relation(fields: [workOrderId], references: [id])
  satisfactionRating Int      // 1-5 scale
  feedbackText       String?
  serviceImprovement String?
  submittedAt        DateTime @default(now())
  createdAt          DateTime @default(now())
  
  @@index([organisationId])
  @@index([citizenReportId])
  @@index([workOrderId])
  @@index([satisfactionRating])
}

// New RiskSignal model from ERD
model RiskSignal {
  id            String   @id @default(cuid())
  organisationId String
  organisation  Organisation @relation(fields: [organisationId], references: [id])
  assetId       String?
  asset         Asset?   @relation(fields: [assetId], references: [id])
  signalType    String
  severity      String
  description   String
  source        String
  detectedAt    DateTime
  resolvedAt    DateTime?
  status        String   @default("OPEN")
  createdAt     DateTime @default(now())
  
  @@index([organisationId])
  @@index([assetId])
  @@index([signalType])
  @@index([severity])
  @@index([detectedAt])
}

// New EnvironmentalSignal model from ERD
model EnvironmentalSignal {
  id            String   @id @default(cuid())
  organisationId String
  organisation  Organisation @relation(fields: [organisationId], references: [id])
  signalType    String
  severity      String
  description   String
  location      Unsupported("geometry(Point,4326)")?
  detectedAt    DateTime
  expiresAt     DateTime?
  status        String   @default("ACTIVE")
  createdAt     DateTime @default(now())
  
  @@index([organisationId])
  @@index([signalType])
  @@index([severity])
  @@index([detectedAt])
}

// New MarginCapacity model from ERD
model MarginCapacity {
  id                String   @id @default(cuid())
  organisationId    String
  organisation      Organisation @relation(fields: [organisationId], references: [id])
  capacityType      String
  availableCapacity Int
  utilisedCapacity  Int
  marginPercentage  Decimal  @db.Decimal(5,2)
  lastUpdatedAt     DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([organisationId])
  @@index([capacityType])
}

// New EmergencyResponse model from ERD
model EmergencyResponse {
  id                    String   @id @default(cuid())
  organisationId        String
  organisation          Organisation @relation(fields: [organisationId], references: [id])
  assetId               String?
  asset                 Asset?   @relation(fields: [assetId], references: [id])
  workOrderId           String?
  workOrder             WorkOrder? @relation(fields: [workOrderId], references: [id])
  emergencyType         String
  severity              String
  responseTimeMinutes   Int
  resolutionTimeMinutes Int
  marginDeployed        Boolean  @default(false)
  activatedAt           DateTime
  resolvedAt            DateTime?
  createdAt             DateTime @default(now())
  
  @@index([organisationId])
  @@index([assetId])
  @@index([emergencyType])
  @@index([severity])
  @@index([activatedAt])
}

// New ComplianceRecord model from ERD
model ComplianceRecord {
  id                String   @id @default(cuid())
  organisationId    String
  organisation      Organisation @relation(fields: [organisationId], references: [id])
  assetId           String?
  asset             Asset?   @relation(fields: [assetId], references: [id])
  criticalControlId String?
  criticalControl   CriticalControl? @relation(fields: [criticalControlId], references: [id])
  complianceType    String
  status            String
  dueDate           DateTime?
  completedDate     DateTime?
  evidenceCount     Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([organisationId])
  @@index([assetId])
  @@index([criticalControlId])
  @@index([complianceType])
  @@index([status])
}

// New EscalationEvent model from ERD
model EscalationEvent {
  id                String   @id @default(cuid())
  organisationId    String
  organisation      Organisation @relation(fields: [organisationId], references: [id])
  assetId           String?
  asset             Asset?   @relation(fields: [assetId], references: [id])
  criticalControlId String?
  criticalControl   CriticalControl? @relation(fields: [criticalControlId], references: [id])
  workOrderId       String?
  workOrder         WorkOrder? @relation(fields: [workOrderId], references: [id])
  escalationType    String
  severity          String
  reason            String
  escalatedTo       String
  escalatedAt       DateTime
  acknowledgedAt    DateTime?
  resolvedAt        DateTime?
  createdAt         DateTime @default(now())
  
  @@index([organisationId])
  @@index([assetId])
  @@index([criticalControlId])
  @@index([workOrderId])
  @@index([escalationType])
  @@index([severity])
  @@index([escalatedAt])
}

// New WorkOrderEvidence model from ERD
model WorkOrderEvidence {
  id              String   @id @default(cuid())
  organisationId  String
  organisation    Organisation @relation(fields: [organisationId], references: [id])
  workOrderId     String
  workOrder       WorkOrder @relation(fields: [workOrderId], references: [id])
  evidenceType    String
  filePath        String
  fileName        String
  fileSize        Int
  gpsCoordinates  Unsupported("geometry(Point,4326)")?
  uploadedAt      DateTime
  createdAt       DateTime @default(now())
  
  @@index([organisationId])
  @@index([workOrderId])
  @@index([evidenceType])
  @@index([uploadedAt])
}

// New InspectionPhoto model from ERD
model InspectionPhoto {
  id              String   @id @default(cuid())
  organisationId  String
  organisation    Organisation @relation(fields: [organisationId], references: [id])
  inspectionId    String
  inspection      Inspection @relation(fields: [inspectionId], references: [id])
  filePath        String
  fileName        String
  gpsCoordinates  Unsupported("geometry(Point,4326)")?
  description     String?
  uploadedAt      DateTime
  createdAt       DateTime @default(now())
  
  @@index([organisationId])
  @@index([inspectionId])
  @@index([uploadedAt])
}

// Enhanced Inspection model
model Inspection {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Enhanced inspection details
  inspectionDate DateTime
  inspectorName  String
  inspectorId    String?
  inspector     User?   @relation(fields: [inspectorId], references: [id])
  workOrderId   String?
  workOrder     WorkOrder? @relation(fields: [workOrderId], references: [id])
  
  // Enhanced inspection results
  condition     AssetCondition
  conditionNotes String?
  riskScore     Int?
  issues        String[] @default([])
  recommendations String?
  
  // Enhanced next actions
  nextInspectionDate DateTime?
  priorityActions   String?
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Enhanced relationships
  photos       InspectionPhoto[]

  @@index([assetId])
  @@index([inspectionDate])
  @@index([condition])
}

// Existing models continue with minimal changes
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session tracking fields
  ipAddress    String?
  userAgent    String?
  deviceInfo   String?
  location     String?
  isActive     Boolean  @default(true)
  lastUsed     DateTime @default(now())
  createdAt    DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AuditAction {
  USER_LOGIN
  USER_LOGOUT
  USER_ROLE_CHANGE
  USER_STATUS_CHANGE
  USER_PASSWORD_RESET
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  ORGANISATION_CREATED
  ORGANISATION_UPDATED
  ORGANISATION_DELETED
  MFA_ENABLED
  MFA_DISABLED
  MFA_VERIFIED
  MFA_BACKUP_CODE_USED
  ASSET_CREATED
  ASSET_UPDATED
  ASSET_DELETED
  ASSET_IMPORTED
  ASSET_DOCUMENT_ATTACHED
  ASSET_DOCUMENT_REMOVED
}

model AuditLog {
  id             String      @id @default(cuid())
  action         AuditAction
  userId         String?
  user           User?       @relation(fields: [userId], references: [id])
  organisationId String?
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  assetId        String?
  asset          Asset?      @relation(fields: [assetId], references: [id])
  details        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime    @default(now())

  @@index([userId])
  @@index([organisationId])
  @@index([assetId])
  @@index([action])
  @@index([createdAt])
}

// Asset Management Schema
enum AssetType {
  BUILDING
  ROAD
  BRIDGE
  FOOTPATH
  PARK
  PLAYGROUND
  SPORTS_FACILITY
  LIBRARY
  COMMUNITY_CENTRE
  CAR_PARK
  STREET_FURNITURE
  TRAFFIC_LIGHT
  STREET_LIGHT
  DRAINAGE
  WATER_SUPPLY
  SEWER
  ELECTRICAL_INFRASTRUCTURE
  TELECOMMUNICATIONS
  
  // Enhanced asset types for renewable energy and smart infrastructure
  WIND_TURBINE
  SOLAR_ARRAY
  BATTERY_STORAGE
  WIND_FARM_SUBSTATION
  SOLAR_FARM_INVERTER
  GRID_SCALE_BATTERY
  COMMUNITY_BATTERY
  MOBILE_BATTERY
  SMART_STREETLIGHT
  SMART_POLE
  SMART_TRAFFIC_LIGHT
  TRAFFIC_SENSOR
  EV_CHARGING_STATION
  EV_CHARGING_HUB
  IOT_SENSOR
  AIR_QUALITY_MONITOR
  WATER_TREATMENT_PLANT
  WASTEWATER_TREATMENT_PLANT
  WATER_STORAGE_TANK
  SMART_WATER_METER
  
  OTHER
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  UNDER_CONSTRUCTION
  UNDER_MAINTENANCE
  DECOMMISSIONED
  PLANNED
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
  UNKNOWN
}

enum AssetPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model AssetDocument {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Document Information
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  filePath    String
  description String?
  
  // Document Type
  documentType String // e.g., "MANUAL", "WARRANTY", "INSPECTION", "PHOTO", "DRAWING"
  
  // Metadata
  uploadedBy  String?
  uploadedByUser User? @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([assetId])
  @@index([documentType])
  @@index([createdAt])
}

model AssetInspection {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Inspection Details
  inspectionDate DateTime
  inspectorName  String
  inspectorId    String?
  inspector     User?   @relation(fields: [inspectorId], references: [id])
  
  // Inspection Results
  condition     AssetCondition
  conditionNotes String?
  issues        String[] @default([])
  recommendations String?
  
  // Next Actions
  nextInspectionDate DateTime?
  priorityActions   String?
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([assetId])
  @@index([inspectionDate])
  @@index([condition])
}

model AssetMaintenance {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Maintenance Details
  maintenanceDate DateTime
  maintenanceType String // e.g., "PREVENTIVE", "CORRECTIVE", "EMERGENCY"
  description     String
  performedBy     String?
  performedByUser User?  @relation(fields: [performedBy], references: [id])
  
  // Cost and Time
  cost        Decimal? @db.Decimal(12,2)
  duration    Int? // in minutes
  materials    String?
  
  // Results
  issuesFound    String?
  workPerformed  String?
  recommendations String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([assetId])
  @@index([maintenanceDate])
  @@index([maintenanceType])
}

// =============================================================================
// RCM Templates & Scheduling Models
// =============================================================================

enum RCMTemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  REVIEW_REQUIRED
}

enum FailureModeType {
  FUNCTIONAL_FAILURE
  DEGRADED_PERFORMANCE
  COMPLETE_FAILURE
  INTERMITTENT_FAILURE
}

enum FailureEffectSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MaintenanceTaskType {
  INSPECTION
  CLEANING
  LUBRICATION
  ADJUSTMENT
  REPLACEMENT
  REPAIR
  CALIBRATION
  TESTING
}

enum MaintenanceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
  BIENNIALLY
  AS_NEEDED
  CONDITION_BASED
}

model RCMTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  assetType   String   // Links to Asset.assetType
  
  // Template metadata
  version     String   @default("1.0")
  status      RCMTemplateStatus @default(DRAFT)
  isPublic    Boolean  @default(false)
  
  // Ownership
  createdBy   String
  createdByUser User   @relation("RCMTemplateCreatedBy", fields: [createdBy], references: [id])
  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id])
  
  // Template content
  failureModes RCMFailureMode[]
  maintenanceTasks RCMMaintenanceTask[]
  
  // Usage tracking
  assetsUsingTemplate AssetRCMTemplate[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([assetType])
  @@index([status])
  @@index([createdBy])
  @@index([organisationId])
}

model RCMFailureMode {
  id          String   @id @default(cuid())
  templateId  String
  template    RCMTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  // Failure mode details
  name        String
  description String?
  type        FailureModeType
  cause       String?
  
  // Effects analysis
  effect      String
  severity    FailureEffectSeverity
  consequences String?
  
  // Detection and prevention
  detectionMethod String?
  preventionMethod String?
  
  // Risk assessment
  probability Int? // 1-10 scale
  impact      Int? // 1-10 scale
  riskScore   Int? // Calculated: probability * impact
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([templateId])
  @@index([type])
  @@index([severity])
}

model RCMMaintenanceTask {
  id          String   @id @default(cuid())
  templateId  String
  template    RCMTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  // Task details
  name        String
  description String?
  type        MaintenanceTaskType
  frequency   MaintenanceFrequency
  
  // Task specifics
  duration    Int? // Estimated duration in minutes
  skillLevel  String? // Required skill level
  tools       String? // Required tools
  materials   String? // Required materials
  instructions String? // Step-by-step instructions
  
  // Safety and compliance
  safetyRequirements String?
  complianceNotes    String?
  
  // Cost estimation
  estimatedCost Decimal? @db.Decimal(10, 2)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([templateId])
  @@index([type])
  @@index([frequency])
}

model AssetRCMTemplate {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  templateId  String
  template    RCMTemplate @relation(fields: [templateId], references: [id])
  
  // Customization
  // customFailureModes RCMFailureMode[]
  // customMaintenanceTasks RCMMaintenanceTask[]
  
  // Status
  isActive    Boolean  @default(true)
  lastReview  DateTime?
  nextReview  DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([assetId, templateId])
  @@index([assetId])
  @@index([templateId])
  @@index([isActive])
}

model MaintenanceSchedule {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  templateId  String?
  // template    RCMTemplate? @relation(fields: [templateId], references: [id])
  
  // Schedule details
  taskName    String
  taskType    MaintenanceTaskType
  frequency   MaintenanceFrequency
  
  // Timing
  scheduledDate DateTime
  dueDate     DateTime
  completedDate DateTime?
  
  // Assignment
  assignedTo String?
  // assignedToUser User? @relation(fields: [assignedTo], references: [id])
  
  // Status
  status     String @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  priority   AssetPriority @default(MEDIUM)
  
  // Results
  workPerformed String?
  notes        String?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([assetId])
  @@index([scheduledDate])
  @@index([dueDate])
  @@index([status])
  @@index([assignedTo])
}

model Invitation {
  id            String     @id @default(cuid())
  email         String
  role          Role
  organisationId String
  organisation  Organisation @relation(fields: [organisationId], references: [id])
  invitedBy     String
  invitedByUser User       @relation("InvitedBy", fields: [invitedBy], references: [id])
  message       String?
  status        InvitationStatus @default(PENDING)
  expiresAt     DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  @@unique([email, organisationId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
