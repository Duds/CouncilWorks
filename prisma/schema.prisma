generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  CREW
  EXEC
  CONTRACTOR
  PARTNER
  CITIZEN
}

model Organisation {
  id        String     @id @default(cuid())
  name      String     @unique
  users     User[]
  auditLogs AuditLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  name            String?
  passwordHash    String?
  role            Role         @default(CITIZEN)
  organisationId  String?
  organisation    Organisation? @relation(fields: [organisationId], references: [id])
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  isActive        Boolean      @default(true)
  lastLoginAt     DateTime?
  passwordResetAt DateTime?
  auditLogs       AuditLog[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AuditAction {
  USER_LOGIN
  USER_LOGOUT
  USER_ROLE_CHANGE
  USER_STATUS_CHANGE
  USER_PASSWORD_RESET
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  ORGANISATION_CREATED
  ORGANISATION_UPDATED
  ORGANISATION_DELETED
}

model AuditLog {
  id             String      @id @default(cuid())
  action         AuditAction
  userId         String?
  user           User?       @relation(fields: [userId], references: [id])
  organisationId String?
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  details        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime    @default(now())

  @@index([userId])
  @@index([organisationId])
  @@index([action])
  @@index([createdAt])
}
