generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  SUPERVISOR
  CREW
  EXEC
  CONTRACTOR
  PARTNER
  CITIZEN
}

model Organisation {
  id        String     @id @default(cuid())
  name      String     @unique
  users     User[]
  assets    Asset[]
  auditLogs AuditLog[]
  rcmTemplates RCMTemplate[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  name            String?
  passwordHash    String?
  role            Role         @default(CITIZEN)
  organisationId  String?
  organisation    Organisation? @relation(fields: [organisationId], references: [id])
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  isActive        Boolean      @default(true)
  lastLoginAt     DateTime?
  passwordResetAt DateTime?
  auditLogs       AuditLog[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // MFA fields
  mfaEnabled      Boolean      @default(false)
  mfaSecret       String?
  mfaBackupCodes  String[]     @default([])
  mfaVerifiedAt   DateTime?
  
  // Profile fields
  phoneNumber     String?
  bio             String?
  timezone        String       @default("Australia/Sydney")
  language        String       @default("en-AU")
  
  // Notification preferences
  notificationPreferences Json @default("{}")
  
  // Asset-related relationships
  assetsCreated   Asset[]      @relation("AssetCreatedBy")
  assetsUpdated   Asset[]      @relation("AssetUpdatedBy")
  assetDocuments  AssetDocument[]
  assetInspections AssetInspection[]
  assetMaintenance AssetMaintenance[]
  workOrdersAssigned WorkOrder[]
  workOrdersCreated WorkOrder[] @relation("WorkOrderAssignedBy")
  
  // RCM Templates & Scheduling
  rcmTemplatesCreated RCMTemplate[] @relation("RCMTemplateCreatedBy")
  // maintenanceSchedulesAssigned MaintenanceSchedule[] @relation("MaintenanceScheduleAssignedTo")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session tracking fields
  ipAddress    String?
  userAgent    String?
  deviceInfo   String?
  location     String?
  isActive     Boolean  @default(true)
  lastUsed     DateTime @default(now())
  createdAt    DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AuditAction {
  USER_LOGIN
  USER_LOGOUT
  USER_ROLE_CHANGE
  USER_STATUS_CHANGE
  USER_PASSWORD_RESET
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  ORGANISATION_CREATED
  ORGANISATION_UPDATED
  ORGANISATION_DELETED
  MFA_ENABLED
  MFA_DISABLED
  MFA_VERIFIED
  MFA_BACKUP_CODE_USED
  ASSET_CREATED
  ASSET_UPDATED
  ASSET_DELETED
  ASSET_IMPORTED
  ASSET_DOCUMENT_ATTACHED
  ASSET_DOCUMENT_REMOVED
}

model AuditLog {
  id             String      @id @default(cuid())
  action         AuditAction
  userId         String?
  user           User?       @relation(fields: [userId], references: [id])
  organisationId String?
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  assetId        String?
  asset          Asset?      @relation(fields: [assetId], references: [id])
  details        Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime    @default(now())

  @@index([userId])
  @@index([organisationId])
  @@index([assetId])
  @@index([action])
  @@index([createdAt])
}

// Asset Management Schema
enum AssetType {
  BUILDING
  ROAD
  BRIDGE
  FOOTPATH
  PARK
  PLAYGROUND
  SPORTS_FACILITY
  LIBRARY
  COMMUNITY_CENTRE
  CAR_PARK
  STREET_FURNITURE
  TRAFFIC_LIGHT
  STREET_LIGHT
  DRAINAGE
  WATER_SUPPLY
  SEWER
  ELECTRICAL_INFRASTRUCTURE
  TELECOMMUNICATIONS
  OTHER
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  UNDER_CONSTRUCTION
  UNDER_MAINTENANCE
  DECOMMISSIONED
  PLANNED
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
  UNKNOWN
}

enum AssetPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Asset {
  id              String       @id @default(cuid())
  organisationId  String
  organisation    Organisation @relation(fields: [organisationId], references: [id])
  
  // Basic Asset Information
  assetNumber     String       @unique
  name            String
  description     String?
  assetType       AssetType
  status          AssetStatus  @default(ACTIVE)
  condition       AssetCondition @default(UNKNOWN)
  priority        AssetPriority @default(MEDIUM)
  
  // Location Information (PostGIS spatial data)
  location        Unsupported("geometry(Point,4326)")? // PostGIS Point geometry
  address         String?
  suburb          String?
  postcode        String?
  state           String       @default("NSW")
  country         String       @default("Australia")
  
  // Asset Details
  manufacturer    String?
  model          String?
  serialNumber   String?
  installationDate DateTime?
  warrantyExpiry DateTime?
  expectedLifespan Int? // in years
  
  // Financial Information
  purchasePrice  Decimal?     @db.Decimal(12,2)
  currentValue   Decimal?     @db.Decimal(12,2)
  replacementCost Decimal?    @db.Decimal(12,2)
  depreciationRate Decimal?   @db.Decimal(5,2) // percentage
  
  // Maintenance Information
  lastInspection DateTime?
  nextInspection DateTime?
  inspectionFrequency Int? // in days
  maintenanceCost Decimal? @db.Decimal(12,2)
  
  // Metadata
  tags           String[]     @default([])
  notes          String?
  isPublic       Boolean      @default(false)
  
  // Relationships
  documents      AssetDocument[]
  inspections    AssetInspection[]
  maintenance    AssetMaintenance[]
  workOrders     WorkOrder[]
  auditLogs      AuditLog[]
  
  // RCM Templates & Scheduling
  rcmTemplates   AssetRCMTemplate[]
  maintenanceSchedules MaintenanceSchedule[]
  
  // Audit fields
  createdBy      String?
  createdByUser  User?        @relation("AssetCreatedBy", fields: [createdBy], references: [id])
  updatedBy      String?
  updatedByUser  User?        @relation("AssetUpdatedBy", fields: [updatedBy], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organisationId])
  @@index([assetNumber])
  @@index([assetType])
  @@index([status])
  @@index([condition])
  @@index([priority])
  @@index([location])
  @@index([createdAt])
}

model AssetDocument {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Document Information
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  filePath    String
  description String?
  
  // Document Type
  documentType String // e.g., "MANUAL", "WARRANTY", "INSPECTION", "PHOTO", "DRAWING"
  
  // Metadata
  uploadedBy  String?
  uploadedByUser User? @relation(fields: [uploadedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([assetId])
  @@index([documentType])
  @@index([createdAt])
}

model AssetInspection {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Inspection Details
  inspectionDate DateTime
  inspectorName  String
  inspectorId    String?
  inspector     User?   @relation(fields: [inspectorId], references: [id])
  
  // Inspection Results
  condition     AssetCondition
  conditionNotes String?
  issues        String[] @default([])
  recommendations String?
  
  // Next Actions
  nextInspectionDate DateTime?
  priorityActions   String?
  
  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([assetId])
  @@index([inspectionDate])
  @@index([condition])
}

model AssetMaintenance {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Maintenance Details
  maintenanceDate DateTime
  maintenanceType String // e.g., "PREVENTIVE", "CORRECTIVE", "EMERGENCY"
  description     String
  performedBy     String?
  performedByUser User?  @relation(fields: [performedBy], references: [id])
  
  // Cost and Time
  cost        Decimal? @db.Decimal(12,2)
  duration    Int? // in minutes
  materials    String?
  
  // Results
  issuesFound    String?
  workPerformed  String?
  recommendations String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([assetId])
  @@index([maintenanceDate])
  @@index([maintenanceType])
}

model WorkOrder {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  // Work Order Details
  workOrderNumber String @unique
  title         String
  description   String
  priority      AssetPriority @default(MEDIUM)
  status        String @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  
  // Assignment
  assignedTo   String?
  assignedToUser User? @relation(fields: [assignedTo], references: [id])
  assignedBy   String?
  assignedByUser User? @relation("WorkOrderAssignedBy", fields: [assignedBy], references: [id])
  
  // Scheduling
  scheduledDate DateTime?
  dueDate      DateTime?
  completedDate DateTime?
  
  // Cost and Time
  estimatedCost Decimal? @db.Decimal(12,2)
  actualCost    Decimal? @db.Decimal(12,2)
  estimatedDuration Int? // in minutes
  actualDuration   Int? // in minutes
  
  // Results
  workPerformed String?
  notes        String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([assetId])
  @@index([workOrderNumber])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([dueDate])
}

// =============================================================================
// RCM Templates & Scheduling Models
// =============================================================================

enum RCMTemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  REVIEW_REQUIRED
}

enum FailureModeType {
  FUNCTIONAL_FAILURE
  DEGRADED_PERFORMANCE
  COMPLETE_FAILURE
  INTERMITTENT_FAILURE
}

enum FailureEffectSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MaintenanceTaskType {
  INSPECTION
  CLEANING
  LUBRICATION
  ADJUSTMENT
  REPLACEMENT
  REPAIR
  CALIBRATION
  TESTING
}

enum MaintenanceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
  BIENNIALLY
  AS_NEEDED
  CONDITION_BASED
}

model RCMTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  assetType   String   // Links to Asset.assetType
  
  // Template metadata
  version     String   @default("1.0")
  status      RCMTemplateStatus @default(DRAFT)
  isPublic    Boolean  @default(false)
  
  // Ownership
  createdBy   String
  createdByUser User   @relation("RCMTemplateCreatedBy", fields: [createdBy], references: [id])
  organisationId String
  organisation Organisation @relation(fields: [organisationId], references: [id])
  
  // Template content
  failureModes RCMFailureMode[]
  maintenanceTasks RCMMaintenanceTask[]
  
  // Usage tracking
  assetsUsingTemplate AssetRCMTemplate[]
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([assetType])
  @@index([status])
  @@index([createdBy])
  @@index([organisationId])
}

model RCMFailureMode {
  id          String   @id @default(cuid())
  templateId  String
  template    RCMTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  // Failure mode details
  name        String
  description String?
  type        FailureModeType
  cause       String?
  
  // Effects analysis
  effect      String
  severity    FailureEffectSeverity
  consequences String?
  
  // Detection and prevention
  detectionMethod String?
  preventionMethod String?
  
  // Risk assessment
  probability Int? // 1-10 scale
  impact      Int? // 1-10 scale
  riskScore   Int? // Calculated: probability * impact
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([templateId])
  @@index([type])
  @@index([severity])
}

model RCMMaintenanceTask {
  id          String   @id @default(cuid())
  templateId  String
  template    RCMTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  // Task details
  name        String
  description String?
  type        MaintenanceTaskType
  frequency   MaintenanceFrequency
  
  // Task specifics
  duration    Int? // Estimated duration in minutes
  skillLevel  String? // Required skill level
  tools       String? // Required tools
  materials   String? // Required materials
  instructions String? // Step-by-step instructions
  
  // Safety and compliance
  safetyRequirements String?
  complianceNotes    String?
  
  // Cost estimation
  estimatedCost Decimal? @db.Decimal(10, 2)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([templateId])
  @@index([type])
  @@index([frequency])
}

model AssetRCMTemplate {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  templateId  String
  template    RCMTemplate @relation(fields: [templateId], references: [id])
  
  // Customization
  // customFailureModes RCMFailureMode[]
  // customMaintenanceTasks RCMMaintenanceTask[]
  
  // Status
  isActive    Boolean  @default(true)
  lastReview  DateTime?
  nextReview  DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([assetId, templateId])
  @@index([assetId])
  @@index([templateId])
  @@index([isActive])
}

model MaintenanceSchedule {
  id          String   @id @default(cuid())
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  templateId  String?
  // template    RCMTemplate? @relation(fields: [templateId], references: [id])
  
  // Schedule details
  taskName    String
  taskType    MaintenanceTaskType
  frequency   MaintenanceFrequency
  
  // Timing
  scheduledDate DateTime
  dueDate     DateTime
  completedDate DateTime?
  
  // Assignment
  assignedTo String?
  // assignedToUser User? @relation(fields: [assignedTo], references: [id])
  
  // Status
  status     String @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, CANCELLED
  priority   AssetPriority @default(MEDIUM)
  
  // Results
  workPerformed String?
  notes        String?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([assetId])
  @@index([scheduledDate])
  @@index([dueDate])
  @@index([status])
  @@index([assignedTo])
}
