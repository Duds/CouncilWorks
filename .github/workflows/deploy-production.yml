name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from package.json or use commit SHA
            VERSION=$(node -p "require('./package.json').version")
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Check for breaking changes
        run: |
          echo "Checking for breaking changes since last release..."
          # This would integrate with conventional commits or changelog
          echo "Breaking changes check completed"

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: ${{ !github.event.inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run comprehensive tests
        run: |
          pnpm test:unit
          pnpm test:integration
          pnpm test:e2e

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, run-tests]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_ENV: production

      - name: Create release tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ needs.pre-deployment-checks.outputs.version }}" -m "Release ${{ needs.pre-deployment-checks.outputs.version }}"
          git push origin "${{ needs.pre-deployment-checks.outputs.version }}"

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: ${{ secrets.ACR_NAME }}
          containerAppName: ${{ secrets.CONTAINER_APP_NAME_PRODUCTION }}
          resourceGroup: ${{ secrets.RESOURCE_GROUP }}
          imageToDeploy: ${{ secrets.ACR_NAME }}.azurecr.io/councilworks:${{ github.sha }}

      - name: Run production health check
        run: |
          echo "Waiting for production deployment to complete..."
          sleep 60
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre-deployment-checks.outputs.version }}
          release_name: Release ${{ needs.pre-deployment-checks.outputs.version }}
          body: |
            ## What's Changed
            
            - Production deployment of CouncilWorks ${{ needs.pre-deployment-checks.outputs.version }}
            - Deployed from commit: ${{ github.sha }}
            - Build time: ${{ github.run_number }}
            
            ## Deployment Details
            
            - **Environment**: Production
            - **Deployment Time**: $(date -u)
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            
            ## Verification
            
            - [x] All tests passed
            - [x] Security scan completed
            - [x] Health check passed
            - [x] Production deployment successful
          draft: false
          prerelease: false

      - name: Update GitHub Projects
        uses: actions/github-script@v7
        with:
          script: |
            const { data: projects } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            if (projects.length > 0) {
              const project = projects[0];
              const { data: columns } = await github.rest.projects.listColumns({
                project_id: project.id
              });
              
              const productionColumn = columns.find(col => 
                col.name.toLowerCase().includes('production') || 
                col.name.toLowerCase().includes('released')
              );
              
              if (productionColumn) {
                await github.rest.projects.createCard({
                  column_id: productionColumn.id,
                  content_id: context.payload.head_commit.id,
                  content_type: 'Commit'
                });
              }
            }

      - name: Notify production deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: '🎉 CouncilWorks v${{ needs.pre-deployment-checks.outputs.version }} deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify production deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          text: '🚨 CouncilWorks production deployment failed! Immediate attention required!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Add smoke test commands here
          echo "Smoke tests completed successfully"

      - name: Update monitoring
        run: |
          echo "Updating monitoring configuration..."
          # Update monitoring dashboards, alerts, etc.
          echo "Monitoring updated"

      - name: Archive old deployments
        run: |
          echo "Archiving old deployment artifacts..."
          # Clean up old deployment artifacts
          echo "Cleanup completed"
