name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: No Node project detected; skipping lint/type-check
        if: ${{ hashFiles('**/package.json') == '' }}
        run: echo "No package.json found; skipping Node lint/type-check"

      - name: Setup Node.js
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        if: ${{ hashFiles('**/package.json') != '' }}
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        if: ${{ hashFiles('**/package.json') != '' }}
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        if: ${{ hashFiles('**/package.json') != '' }}
        run: pnpm lint

      - name: Run TypeScript check
        if: ${{ hashFiles('**/package.json') != '' }}
        run: pnpm type-check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: No Node project detected; skipping tests
        if: ${{ hashFiles('**/package.json') == '' }}
        run: echo "No package.json found; skipping Node tests"

      - name: Setup Node.js
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        if: ${{ hashFiles('**/package.json') != '' }}
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        if: ${{ hashFiles('**/package.json') != '' }}
        run: pnpm install --frozen-lockfile

      - name: Run tests
        if: ${{ hashFiles('**/package.json') != '' }}
        run: pnpm test

      - name: Upload coverage reports
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: No Node project detected; skipping build
        if: ${{ hashFiles('**/package.json') == '' }}
        run: echo "No package.json found; skipping Node build"

      - name: Setup Node.js
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        if: ${{ hashFiles('**/package.json') != '' }}
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        if: ${{ hashFiles('**/package.json') != '' }}
        run: pnpm install --frozen-lockfile

      - name: Build application
        if: ${{ hashFiles('**/package.json') != '' }}
        run: pnpm build

      - name: Upload build artifacts
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
