name: Automated Review & Promotion

on:
  pull_request:
    branches: [automated-review]
    types: [opened, synchronize, closed]
  push:
    branches: [automated-review]
  workflow_dispatch:
    inputs:
      promote_to_develop:
        description: 'Promote approved changes to develop branch'
        required: false
        default: false
        type: boolean
      batch_size:
        description: 'Number of PRs to promote in batch'
        required: false
        default: 5
        type: number

env:
  NODE_VERSION: '20'

jobs:
  automated-review:
    name: Automated Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive tests
        run: |
          npm run typecheck
          npm run lint
          npm run test:ci
          npm run build

      - name: Security audit
        run: |
          npm audit --audit-level=high || true
          npx audit-ci --moderate

      - name: Check for breaking changes
        id: breaking-changes
        run: |
          echo "Checking for potential breaking changes..."
          # Check if any major version updates are included
          if git diff --name-only HEAD~1 HEAD | grep -q "package.json"; then
            echo "Package.json changes detected - checking for major updates"
            # This would need more sophisticated analysis
            echo "has_potential_breaking=true" >> $GITHUB_OUTPUT
          else
            echo "has_potential_breaking=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate review report
        id: review-report
        run: |
          echo "## Automated Review Report" > review-report.md
          echo "" >> review-report.md
          echo "**Review Date:** $(date)" >> review-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> review-report.md
          echo "**Commit:** ${{ github.sha }}" >> review-report.md
          echo "" >> review-report.md
          echo "### Test Results" >> review-report.md
          echo "- ✅ TypeScript compilation: PASSED" >> review-report.md
          echo "- ✅ Linting: PASSED" >> review-report.md
          echo "- ✅ Tests: PASSED" >> review-report.md
          echo "- ✅ Build: PASSED" >> review-report.md
          echo "" >> review-report.md
          echo "### Security Audit" >> review-report.md
          echo "- ✅ Security audit completed" >> review-report.md
          echo "" >> review-report.md
          if [ "${{ steps.breaking-changes.outputs.has_potential_breaking }}" = "true" ]; then
            echo "### ⚠️ Breaking Changes Detected" >> review-report.md
            echo "- Manual review required for major version updates" >> review-report.md
          else
            echo "### ✅ No Breaking Changes" >> review-report.md
            echo "- Safe for automated promotion" >> review-report.md
          fi

      - name: Comment review report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('review-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: report
            });

      - name: Auto-approve safe changes
        if: github.event_name == 'pull_request' && steps.breaking-changes.outputs.has_potential_breaking == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            // Auto-approve if no breaking changes detected
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE',
              body: '✅ Automated approval: No breaking changes detected, all tests passed.'
            });

  promote-to-develop:
    name: Promote to Develop
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.promote_to_develop == 'true'
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get approved PRs
        id: approved-prs
        uses: actions/github-script@v6
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'automated-review',
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: ${{ github.event.inputs.batch_size }}
            });
            
            const approvedPRs = prs.filter(pr => 
              pr.merged_at && 
              pr.labels.some(label => label.name === 'approved-for-promotion')
            );
            
            console.log(`Found ${approvedPRs.length} approved PRs for promotion`);
            return approvedPRs;

      - name: Create promotion PR
        if: steps.approved-prs.outputs.result.length > 0
        uses: actions/github-script@v6
        with:
          script: |
            const approvedPRs = ${{ toJson(steps.approved-prs.outputs.result) }};
            
            // Create promotion branch
            const branchName = `promote/automated-changes-${Date.now()}`;
            
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: context.payload.repository.default_branch
            });
            
            // Create PR to develop
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚀 Promote: Automated changes to develop',
              head: branchName,
              base: 'develop',
              body: `## Promotion of Automated Changes
              
              This PR promotes approved automated changes from the automated-review branch to develop.
              
              **Included Changes:**
              ${approvedPRs.map(pr => `- [${pr.title}](${pr.html_url})`).join('\n')}
              
              **Review Status:**
              - ✅ All changes have been reviewed and approved
              - ✅ All tests have passed
              - ✅ No breaking changes detected
              - ✅ Security audit completed
              
              **Automated Promotion:**
              This PR was created automatically by the Automated Review workflow.
              
              Generated at: $(date)`,
              labels: ['promotion', 'automated', 'ready-for-develop']
            });
            
            console.log(`Created promotion PR #${pr.number}: ${pr.html_url}`);

  batch-promotion:
    name: Batch Promotion
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for batch promotion
        id: batch-check
        uses: actions/github-script@v6
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'automated-review',
              state: 'closed',
              sort: 'updated',
              direction: 'desc',
              per_page: 10
            });
            
            const approvedPRs = prs.filter(pr => 
              pr.merged_at && 
              pr.labels.some(label => label.name === 'approved-for-promotion') &&
              new Date(pr.merged_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days
            );
            
            if (approvedPRs.length >= 3) {
              console.log(`Found ${approvedPRs.length} approved PRs ready for batch promotion`);
              return { ready: true, count: approvedPRs.length };
            }
            
            return { ready: false, count: approvedPRs.length };

      - name: Trigger batch promotion
        if: steps.batch-check.outputs.result.ready == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const result = ${{ toJson(steps.batch-check.outputs.result) }};
            
            // Trigger the promotion workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'automated-review.yml',
              ref: 'main',
              inputs: {
                promote_to_develop: 'true',
                batch_size: result.count.toString()
              }
            });
            
            console.log(`Triggered batch promotion for ${result.count} PRs`);

  cleanup:
    name: Cleanup Old Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cleanup old auto-fix branches
        uses: actions/github-script@v6
        with:
          script: |
            const { data: branches } = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const autoFixBranches = branches.filter(branch => 
              branch.name.startsWith('auto-fix/') && 
              new Date(branch.commit.commit.committer.date) < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
            );
            
            for (const branch of autoFixBranches) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branch.name}`
                });
                console.log(`Deleted old branch: ${branch.name}`);
              } catch (error) {
                console.log(`Could not delete branch ${branch.name}: ${error.message}`);
              }
            }
